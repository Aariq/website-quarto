{
  "hash": "636bb05e07bdfeebf57f3e26633211fe",
  "result": {
    "markdown": "---\ntitle: 'DLNMs: building and visualizing crossbasis functions'\n# author: Eric R. Scott\ndate: '2021-01-13'\n# slug: dlnm-getting-started\ncategories:\n  - DLNMs\n  - GAMs\n  - r\n# projects: [heliconia]\n---\n\n\n\n\n::: callout-note\nThis is part of series about distributed lag non-linear models.\nPlease read the [first post](/post/dlnm) for an introduction and a disclaimer.\n:::\n\n## The dlnm package\n\nThe `dlnm` package offers two ways of fitting crossbasis functions: an \"internal\" and an \"external\" method.\nThe \"external\" method involves fitting the crossbasis function outside of a model, using some functions in the `dlnm` package, then including the results as a predictor in a model such as a generalized linear model (GLM).\nI'm going to focus entirely on the \"internal\" method that fits the crossbasis function in the context of a generalied additive model (GAM) to take advantage of the penalization and other stuff the `mgcv` package offers.\n\n## The data\n\nThroughout this series, I'm going to use a subset of data from my postdoc project on *Heliconia acuminata*.\nIn this subset, 100 plants were tracked over a decade.\nEvery year in February their size was recorded as height and number of shoots, and it was recorded whether or not they flowered.\nAny dead plants were marked as such.\nThe goal is to determine how drought impacted growth, survival, and flowering probability with a potentially delayed and/or non-linear relationship.\nTo that end, I've calculated SPEI, a measure of drought, where more negative numbers represent more severe drought.\nSPEI is monthly while the demography data is yearly.\nFor every observation of a plant, there is an entire history of SPEI for the past 36 months from that observation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(ha)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 11\n  plot  ha_id_nu…¹  year  size size_…² log_s…³ log_s…⁴  flwr  surv spei_…⁵ L[,1]\n  <fct> <fct>      <dbl> <dbl>   <dbl>   <dbl>   <dbl> <dbl> <dbl>   <dbl> <int>\n1 2107  107         1998    66     112    4.19    4.72     0     1 -1.33       0\n2 2107  107         1999   112     102    4.72    4.62     0     1  1.35       0\n3 2107  107         2000   102      68    4.62    4.22     0     1  0.169      0\n4 2107  107         2001    68      96    4.22    4.56     0     1 -0.0884     0\n5 2107  107         2002    96     164    4.56    5.10     0     1 -0.357      0\n6 2107  107         2003   164     114    5.10    4.74     0     1 -1.40       0\n# … with 2 more variables: spei_history[2:37] <dbl>, L[2:37] <int>, and\n#   abbreviated variable names ¹​ha_id_number, ²​size_next, ³​log_size,\n#   ⁴​log_size_next, ⁵​spei_history[,1]\n```\n:::\n:::\n\n\n-   `plot` (factor): A plot ID\n-   `ha_id_number` (factor): A unique plant ID\n-   `year` (numeric): year of census\n-   `size` (numeric): number of shoots x height in cm\n-   `size_next` (numeric): size in the next year\n-   `log_size` (numeric): log transformed size\n-   `log_size_next` (numeric): log transformed size next year\n-   `flwr` (numeric): Did a plant flower? 1 = yes, 0 = no\n-   `surv` (numeric): Did a plant survive? 1 = yes, 0 = no\n-   `spei_history` (c(\"matrix\", \"array\")): A matrix column of the drought history starting in the current month (`spei_history[,1]` = February) and going back 24 months (`spei_history[,25]` = February 2 years ago)\n-   `L` (c(\"matrix\", \"array\")): A matrix column describing the lag structure of `spei_history`. Literally just `0:24` for every row.\n\n## Fit a DLNM\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(mgcv) #for gam()\nlibrary(dlnm) #for the \"cb\" basis\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngrowth <-\n  gam(log_size_next ~ \n        log_size +\n        s(spei_history, L, # <- the two dimensions\n          bs = \"cb\", # <- fit as crossbasis\n          k = c(3, 24), # <- knots for each dimension\n          xt = list(bs = \"cr\")), # <- what basis to use for each dimension\n      family = gaussian(link = \"identity\"),\n      method = \"REML\",\n      data = ha)\n```\n:::\n\n\nAbove is a simple DLNM with survival modeled as a function of number of shoots and the crossbasis function of SPEI over the past 36 months.\n`shts` is a fixed effect (i.e. not a smooth, but to be fit as a straight line), and the crossbasis is defined in `s(spei_history, L, …)`.\n`spei_history` and `L` are the two dimensions of the crossbasis function, `bs = \"cb\"` tells `gam()` that this is a crossbasis function from the `dlnm` package (calls `dlnm::smooth.construct.cb.smooth.spec` behind the scenes).\n`xt = list(bs = \"cr\")` tells it to use a cubic regression spline as the basis for both dimensions of the crossbasis function (but you can also mix and match marginal basis functions by providing a length 2 vector here).\n\n## Problem 1: visualizing the results\n\nUnfortunately `plot.gam()` does not work with these crossbasis functions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot.gam(growth)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in plot.gam(growth): No terms to plot - nothing for plot.gam() to do.\n```\n:::\n:::\n\n\nThe `dlnm` package provides some functions for visualizing the results of a DLNM, though I don't like them much.\n\nFirst you use `crosspred()` to get predicted values for the DLNM.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npred_dat <- crosspred(\"spei_history\", growth)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\ncentering value unspecified. Automatically set to 0\n```\n:::\n:::\n\n\nThen you plot those with `plot.crosspred()`.\nThe default is a 3D plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(pred_dat)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nI prefer a heatmap, although the one produced here has some issues.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(pred_dat, ptype = \"contour\", xlab = \"SPEI\", ylab = \"lag(months)\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nFirst obvious problem is the colors.\nThe range is the same for red and blue, despite different number of breaks.\nSecond, the units are not what I'd expect.\nFor a marginal effects plot these should be the size of an average plant in year t+1, all else being equal.\nThis is plotting the size relative to the size at an average value of SPEI, which is a weird thing to think about.\nThat's because the package was built with epidemiology and relative risk in mind.\nHere is the plot relative to SPEI = 1.5\n\n\n::: {.cell}\n\n```{.r .cell-code}\npred_dat <- crosspred(\"spei_history\", growth, cen = 1.5)\nplot(pred_dat, ptype = \"contour\", xlab = \"SPEI\", ylab = \"lag(months)\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n## Solution (?)\n\nSo, I spent a lot of time writing a complicated function, `cb_margeff()`, to create data for a marginal effects plot.\nIt creates a `newdata` data frame to be passed to `predict()` and loops across different matrixes with all columns of `spei_history` set to average except for one, representing a range of possible SPEI values.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplotdata <- cb_margeff(growth, spei_history, L)\nggplot(plotdata, aes(x = x, y = lag, fill = fitted)) +\n  geom_raster() +\n  scale_fill_viridis_c(\"size in year t+1\", option = \"A\") +\n  scale_x_continuous(\"SPEI\", expand = c(0,0)) +\n  scale_y_continuous(\"lag (months)\", expand = c(0,0))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nYeah, this is looking better.\n\nThe interpretation of this type of plot (which I would describe as a marginal effects plot, but correct me if I'm wrong) makes more sense to me.\nIf there was drought (low SPEI) about 8 months prior to the census, that's bad for growth.\nDrought 20 months prior is good for growth though.\n\n**BUT WAIT**\n\nI poked around in `plot.gam` with `debug()` and it turns out the reason the plotting doesn't work is only because the author of `dlnm`, Gasparrini, didn't want it to work.\n\nI can change a simple flag inside the `growth` model, and then it produces something very similar (identical?) to what I have above:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrowth$smooth[[1]]$plot.me\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\ngrowth$smooth[[1]]$plot.me <- TRUE\nplot.gam(growth, scheme = 2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nWhy is this default plot not available?\nIt's literally **exactly** what I wanted, and I'm pretty sure there's nothing incorrect about it, but it worries me that the author of `dlnm` didn't want me to make it.\n\n# UPDATE\n\nI think I better understand what is going on here now.\n`plot.gam()`, and the `ggplot2` implementation of it, `gratia::draw()`, plot the smooth itself, not the predicted values.\nBy \"the smooth itself\", I mean the function that is acting sort of like one of the coefficients in a GLM.\nInstead of $y = \\beta_0 + \\beta_1 x_1$, we have $y = \\beta_0 + f_1(x_1)$.\nTo further clarify, look at the options for `predict.gam()`.\nTo get predicted $y$ values, you can use `type = \"link\"` or `type = \"response\"`.\nBut if you just want the values for $f_1(x_1)$, then you can use `type = \"terms\"`.\nThe plot above looks like the one I want, but the scale is actually not in units of plant size.\nSee the `gratia` version, which includes a scale bar:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngratia::draw(growth, select = 1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nSo my efforts in creating `cb_margeff()` weren't for nothing, afterall, and are not in conflict with the views of the `dlnm` package authors.\nSome day I should probably figure out how to \"manually\" calculate values of $y$ from the GAM coefficients, but today is not that day.\n\n\n{{< downloadthis index.Rmd dname=\"index.Rmd\" label=\"Download Rmd\" >}}\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}