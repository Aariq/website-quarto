{
  "hash": "65b189b511e7107f09a42b244360001e",
  "result": {
    "markdown": "---\ntitle: DLNM marginal basis functions\nauthor: Eric R. Scott\ndate: '2021-01-18'\n# slug: dlnm-basis\ncategories:\n  - DLNMs\n  - GAMs\n# projects: [heliconia]\n---\n\n{{< downloadthis index.Rmd dname=\"index.Rmd\" label=\"Download Rmd\" >}}\n\n\n\n\n\n::: callout-note\nThis is part of series about distributed lag non-linear models.\nPlease read the [first post](/post/dlnm) for an introduction and a disclaimer.\n:::\n\n## Choosing marginal function to construct a crossbasis\n\nAccording to Gasparrini et al. ([2017](http://doi.wiley.com/10.1111/biom.12645)), a crossbasis function is a \"bi-dimensional dose-lag-response function $f \\cdot w(x,l)$ is composed of two marginal functions: the standard dose-response function $f(x)$, and the additional lag-response function $w(l)$ that models the lag structure...\" Each dimension can be described by a different type of function.\nThe default for the `dlnm` package is a type of smoother called a P-spline, but it can be changed to other types of splines or even something like step function.\nThe marginal functions can also be mixed and matched, e.g., a P-spline for the lag dimension and a step function for the dose-response dimension.\n\nI'd like to use penalized splines for both bases since they are flexible---that is, they can take nearly any functional shape, including a perfectly straight line.\n\nSo far I've been using penalized cubic regression splines for both the lag and dose-response dimensions of my DLNMs, but to be perfectly honest, I think I'm only doing this because Teller et al. ([2016](https://onlinelibrary.wiley.com/doi/abs/10.1111/2041-210X.12486)) use a similar spline basis, However, they aren't even using DLNMs!\nI should at least be able to justify my choice of basis function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(mgcv) #for gam()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: nlme\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'nlme'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:dplyr':\n\n    collapse\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThis is mgcv 1.8-42. For overview type 'help(\"mgcv-package\")'.\n```\n:::\n\n```{.r .cell-code}\nlibrary(dlnm) #for the \"cb\" basis\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nThis is dlnm 2.4.7. For details: help(dlnm) and vignette('dlnmOverview').\n```\n:::\n\n```{.r .cell-code}\n#with cubic regression splines for both dimensions\ngrowth_cr <-\n  gam(log_size_next ~ \n        log_size +\n        s(spei_history, L, # <- the two dimensions\n          bs = \"cb\", # <- fit as crossbasis\n          k = c(4, 24), # <- knots for each dimension\n          xt = list(bs = \"cr\")), # <- what basis to use for each dimension\n      family = gaussian(link = \"identity\"),\n      method = \"REML\",\n      data = ha)\n```\n:::\n\n\nNote: for P-splines, the number of knots, `k`, must be 2 greater than order of the basis (default 2, i.e. cubic), so I'm using the minimum (4) for the dose-response dimension.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#with default P-splines for both dimensions\ngrowth_ps <-\n  gam(log_size_next ~ \n        log_size +\n        s(spei_history, L, # <- the two dimensions\n          bs = \"cb\", # <- fit as crossbasis\n          k = c(4, 24)), # <- knots for each dimension\n      family = gaussian(link = \"identity\"),\n      method = \"REML\",\n      data = ha)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngrowth_cr\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nFamily: gaussian \nLink function: identity \n\nFormula:\nlog_size_next ~ log_size + s(spei_history, L, bs = \"cb\", k = c(4, \n    24), xt = list(bs = \"cr\"))\n\nEstimated degrees of freedom:\n8.37  total = 10.37 \n\nREML score: 675.5565     \n```\n:::\n\n```{.r .cell-code}\ngrowth_ps\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nFamily: gaussian \nLink function: identity \n\nFormula:\nlog_size_next ~ log_size + s(spei_history, L, bs = \"cb\", k = c(4, \n    24))\n\nEstimated degrees of freedom:\n7.63  total = 9.63 \n\nREML score: 673.1247     \n```\n:::\n:::\n\n\nThe REML score is slightly higher for the `\"cr\"` basis, which I *think* means a better fit to data (I think this score is what is being maximized by the model fitting algorithm).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nAIC(growth_cr, growth_ps)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                df      AIC\ngrowth_cr 13.16403 1331.719\ngrowth_ps 12.00639 1332.001\n```\n:::\n:::\n\n\nAIC is also slightly lower for the `\"cr\"` basis\n\n## Do they produce different shapes?\n\nI'm going to use the trick I \"discovered\" in the previous blog post to plot the crossbasis function from each model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrowth_cr$smooth[[1]]$plot.me <- TRUE\ngrowth_ps$smooth[[1]]$plot.me <- TRUE\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow = c(1,2))\nplot(growth_cr, scheme = 2)\nplot(growth_ps, scheme = 2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/figures-1.png){width=672}\n:::\n:::\n\n\nThe minima and maxima are in the same places, which is very reassuring.\nThe wiggliness is different, which is also indicated by the estimated degrees of freedom (8.37 for the \"cs\" model and 7.63 for the \"ps\" model).\n\n## Final Decision\n\nI'm going to stick with the cubic regression spline basis (`bs = \"cr\"`) because it seems to result in a *slightly* better fit to data than the P-spline smoothers.\nIn addition, Simon Wood says \"However, in regular use, splines with derivative based penalties (e.g.\"tp\" or \"cr\" bases) tend to result in slightly better MSE performance\" (see `?smooth.construct.ps.smooth.spec`).\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}