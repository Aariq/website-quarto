{
  "hash": "6a783ab51324cd195cf43f8fed33f09d",
  "result": {
    "markdown": "---\ntitle: \"Oh for {fs}, are you kidding me, base R?\"\nauthor: Eric R. Scott\ndate: '2023-01-05'\ncategories:\n  - r\n---\n\n\n#  \n\nThis is a cautionary tale about the base R function `list.files()`.\nWhen you give it a vector of paths (which you totally can do), it **re-orders** the output alphabetically.\nThis screwed me over in a project I'm working on where I took file paths from a data frame, used them to `list.files()` and assumed (a sane assumption, I think) that the output would be in the same order.\nIn this case, I knew there was only one file per path, but I think I would have assumed this even if it was returning more than one file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmp <- tempdir()\ndir.create(file.path(tmp, \"A\"))\ndir.create(file.path(tmp, \"B\"))\ndir.create(file.path(tmp, \"C\"))\nfile.create(file.path(tmp, \"A\", \"A.txt\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nfile.create(file.path(tmp, \"B\", \"B.txt\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nfile.create(file.path(tmp, \"C\", \"C.txt\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nfile_list <- file.path(tmp, c(\"C\", \"A\", \"B\"))\nfile_list #in order C, A, B\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"/var/folders/wr/by_lst2d2fngf67mknmgf4340000gn/T//Rtmpz3VYwj/C\"\n[2] \"/var/folders/wr/by_lst2d2fngf67mknmgf4340000gn/T//Rtmpz3VYwj/A\"\n[3] \"/var/folders/wr/by_lst2d2fngf67mknmgf4340000gn/T//Rtmpz3VYwj/B\"\n```\n:::\n\n```{.r .cell-code}\nlist.files(file_list, full.names = TRUE) #in order A, B, C!\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"/var/folders/wr/by_lst2d2fngf67mknmgf4340000gn/T//Rtmpz3VYwj/A/A.txt\"\n[2] \"/var/folders/wr/by_lst2d2fngf67mknmgf4340000gn/T//Rtmpz3VYwj/B/B.txt\"\n[3] \"/var/folders/wr/by_lst2d2fngf67mknmgf4340000gn/T//Rtmpz3VYwj/C/C.txt\"\n```\n:::\n:::\n\n\nSo I was wrong, and it made all the work I did for the past several months somewhat wrong, but the good news is there is an easy fix.\nThe [`fs` package](https://fs.r-lib.org/) is the 'tidy' solution to working with files and file paths in R.\nThe `fs` alternative to `list.files()` is [`dir_ls()`](https://fs.r-lib.org/reference/dir_ls.html), and like many tidyverse equivalents of base R functions, it is better because it does *less*.\nIt won't re-order the outputs and it always assumes you want the full paths (not just the file name as is the default with `list.files()`).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(fs)\nfs::dir_ls(file_list) #in correct order C, A, B\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n/var/folders/wr/by_lst2d2fngf67mknmgf4340000gn/T/Rtmpz3VYwj/C/C.txt\n/var/folders/wr/by_lst2d2fngf67mknmgf4340000gn/T/Rtmpz3VYwj/A/A.txt\n/var/folders/wr/by_lst2d2fngf67mknmgf4340000gn/T/Rtmpz3VYwj/B/B.txt\n```\n:::\n:::\n\n\nNeedless to say, I'll be switching over to `fs::dir_ls()` for this project.\nI'll also be spending some more time exploring the `fs` package and likely using it for all my file exploring and manipulation needs from now on.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}