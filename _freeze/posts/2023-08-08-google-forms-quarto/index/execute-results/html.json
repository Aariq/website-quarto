{
  "hash": "c363f87587f5428c8ebb6ec11d2e922e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Re-constructing Google Forms responses with Quarto and {glue}\"\ndate: '2023-08-08'\ncategories:\n  - r\n  - quarto\n---\n\n\n\n\nRecently I had to go through about 50 applications to a short course that were submitted via Google Forms and whittle it down to about 20 applicants.\nGoogle Forms collects data into a Google Sheet document, which is nice for machine readability, but in this case made it very difficult to read long format answers to questions.\nI spent about an hour using Quarto and the `glue` package to convert that data into something that looked more like an application.\n\nI can't share the original form or data, so for the sake of this blog post, I made a simple example form.\n\nForm: <https://forms.gle/yJjME2yZMZPzw3p28>\n\nResponses: <https://docs.google.com/spreadsheets/d/1SUy92T7I3ZoEyZjTxLP7F5pAup58c0xKl0QbvElIfxA/edit?usp=sharing>\n\n## Reading in the data\n\n`googlesheets4` is the package to use to read in the data.\nWe'll need the sheet ID bit of the URL above to access it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(googlesheets4)\napplicants_raw <- read_sheet(\"1SUy92T7I3ZoEyZjTxLP7F5pAup58c0xKl0QbvElIfxA\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\napplicants_raw\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 11\n  Timestamp           Name          Email              Department `Career Stage`\n  <dttm>              <chr>         <chr>              <chr>      <chr>         \n1 2023-08-08 11:33:44 Eric Scott    ericrscott@arizon… Biology    Staff         \n2 2023-08-08 11:35:39 Perrald Mason perry@notreal.org  Art Histo… Grad Student  \n3 2023-08-08 11:37:27 BMO           BMO@mo.com         Physics    Undergraduate \n# ℹ 6 more variables:\n#   `How comfortable are you with the following? [Using shell commands]` <chr>,\n#   `How comfortable are you with the following? [Writing for loops in R]` <chr>,\n#   `How comfortable are you with the following? [Data wrangling in R]` <chr>,\n#   `How comfortable are you with the following? [Using git commands]` <chr>,\n#   `How comfortable are you with the following? [Using Quarto or RMarkdown]` <chr>,\n#   `Why do you want to take this course?` <chr>\n```\n\n\n:::\n:::\n\n\nYou'll notice that the column headings are long and unruly, but also have important information.\nI'll save the originals and then clean them up in the dataframe with `janitor::clean_names()`.\nI'll remove the repetitive question \"How comfortable are you with the following?\" from the matrix question answer columns with some regex and `stringr`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(janitor)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'janitor'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(stringr)\n\nquestions <-\n  colnames(applicants_raw) |> \n  str_replace(\"How comfortable are you with the following\\\\? \\\\[(.+)\\\\]\", \"\\\\1\")\n\napplicants <- \n  applicants_raw |> \n  clean_names()\n\nquestions\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Timestamp\"                           \n [2] \"Name\"                                \n [3] \"Email\"                               \n [4] \"Department\"                          \n [5] \"Career Stage\"                        \n [6] \"Using shell commands\"                \n [7] \"Writing for loops in R\"              \n [8] \"Data wrangling in R\"                 \n [9] \"Using git commands\"                  \n[10] \"Using Quarto or RMarkdown\"           \n[11] \"Why do you want to take this course?\"\n```\n\n\n:::\n\n```{.r .cell-code}\napplicants\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 11\n  timestamp           name  email department career_stage how_comfortable_are_…¹\n  <dttm>              <chr> <chr> <chr>      <chr>        <chr>                 \n1 2023-08-08 11:33:44 Eric… eric… Biology    Staff        Very comfortable      \n2 2023-08-08 11:35:39 Perr… perr… Art Histo… Grad Student Not comfortable       \n3 2023-08-08 11:37:27 BMO   BMO@… Physics    Undergradua… Not comfortable       \n# ℹ abbreviated name:\n#   ¹​how_comfortable_are_you_with_the_following_using_shell_commands\n# ℹ 5 more variables:\n#   how_comfortable_are_you_with_the_following_writing_for_loops_in_r <chr>,\n#   how_comfortable_are_you_with_the_following_data_wrangling_in_r <chr>,\n#   how_comfortable_are_you_with_the_following_using_git_commands <chr>,\n#   how_comfortable_are_you_with_the_following_using_quarto_or_r_markdown <chr>, …\n```\n\n\n:::\n:::\n\n\n## Creating the markdown\n\nThe \"trick\" here lies in the fact that you can use the chunk option `output: asis` in Quarto (and RMarkdown) to treat the output of a code chunk as markdown.\nSo we can use the `glue` package to programatically create markdown, and because `glue::glue()` is vectorized, we only have to generate a \"template\" of sorts and it will apply it to every response to our form (i.e. every row of the `applicants` tibble).\nYou can see below this chunk how the \"applications\" get formatted by this template.\n\n\n\n````{.cell-code}\n```{{r}}\n#| output: asis\n\nlibrary(glue)\nglue(\"### {applicants$name}\n     {applicants$career_stage} | {applicants$department} | <{applicants$email}>\n     \n     #### How comfortable are you with the following? \n     \n     |                |                    |\n     |----------------|--------------------|\n     |{questions[6]}  | {applicants[[6]]}  |\n     |{questions[7]}  | {applicants[[7]]}  |\n     |{questions[8]}  | {applicants[[8]]}  |\n     |{questions[9]}  | {applicants[[9]]}  |\n     |{questions[10]} | {applicants[[10]]} |\n     \n     #### {questions[11]}\n     \n     {applicants[[11]]}\n     \n     \n     \")\n```\n````\n\n### Eric Scott\nStaff | Biology | <ericrscott@arizona.edu>\n\n#### How comfortable are you with the following? \n\n|                |                    |\n|----------------|--------------------|\n|Using shell commands  | Very comfortable  |\n|Writing for loops in R  | Very comfortable  |\n|Data wrangling in R  | Very comfortable  |\n|Using git commands  | Very comfortable  |\n|Using Quarto or RMarkdown | Very comfortable |\n\n#### Why do you want to take this course?\n\nI love learning\n\n\n### Perrald Mason\nGrad Student | Art History | <perry@notreal.org>\n\n#### How comfortable are you with the following? \n\n|                |                    |\n|----------------|--------------------|\n|Using shell commands  | Not comfortable  |\n|Writing for loops in R  | Somewhat comfortable  |\n|Data wrangling in R  | Not comfortable  |\n|Using git commands  | Not comfortable  |\n|Using Quarto or RMarkdown | Very comfortable |\n\n#### Why do you want to take this course?\n\nWhile my background predominantly lies in the field of Art History, I believe that this course presents a unique and valuable opportunity for me to expand my horizons and develop essential skills that can greatly enhance my academic and professional pursuits.\n\n\n### BMO\nUndergraduate | Physics | <BMO@mo.com>\n\n#### How comfortable are you with the following? \n\n|                |                    |\n|----------------|--------------------|\n|Using shell commands  | Not comfortable  |\n|Writing for loops in R  | Not comfortable  |\n|Data wrangling in R  | Not comfortable  |\n|Using git commands  | Not comfortable  |\n|Using Quarto or RMarkdown | Not comfortable |\n\n#### Why do you want to take this course?\n\nI want to go to school so I can learn all kinds of sweet coding tricks to impress Finn and Jake and also Football.\n\n\n## Putting it all together\n\nFor the cherry on top, you can enable a table of contents and annotation with hypothes.is to allow easy navigation between applicants and allow you to take notes.\nJust add the following to the Quarto YAML header:\n\n``` yaml\ntoc: true\ncomments: \n  hypothesis: true\n```\n\nI put the whole example together in a [repo](https://github.com/Aariq/google-form-quarto) where you can see the .Qmd [source code](https://github.com/Aariq/google-form-quarto/blob/main/applications.qmd) and the [rendered HTML](https://aariq.github.io/google-form-quarto/).\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}