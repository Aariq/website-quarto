{
  "hash": "19bd25a7ea727f8a386a9bdb2c78a5cc",
  "result": {
    "markdown": "---\ntitle: Working with matrix-columns in tibbles\nauthor: Eric R. Scott\ndate: '2021-01-11'\n# slug: matrix-columns\ncategories:\n  - r\n---\n\n\n\n\n# What's a matrix-column?\n\nThe `tibble` package in R allows for the construction of \"tibbles\"---a sort of \"enhanced\" data frame.\nMost of these enhancements are fairly mundane, such as better printing in the console and not modifying column names.\nOne of the unique features of tibbles is the ability to have a column that is a list.\n[List-columns](https://jennybc.github.io/purrr-tutorial/ls13_list-columns.html) have been written about fairly extensively as they are a very cool way of working with data in the tidyverse.\nA less commonly known feature is that matrix-columns are also possible in a tibble.\nA matrix-column is a column of a tibble that is itself a $n \\times m$ matrix.\nBecause a matrix-column is simultaneously a single column (of a tibble) and $m$ columns (of the matrix), there are some quirks to working with them.\n\n# Creating a matrix-column.\n\nData frames and tibbles handle matrix inputs differently.\n`data.frame()` adds an $n \\times m$ matrix as $m$ columns of a dataframe while `tibble()` creates a matrix-column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_matrix <- matrix(rnorm(100), nrow = 10)\n```\n:::\n\n\nNo matrix-column.\nJust regular columns named `mat_col._`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- data.frame(x = letters[1:10], mat_col = my_matrix)\ndim(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10 11\n```\n:::\n\n```{.r .cell-code}\ncolnames(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"x\"          \"mat_col.1\"  \"mat_col.2\"  \"mat_col.3\"  \"mat_col.4\" \n [6] \"mat_col.5\"  \"mat_col.6\"  \"mat_col.7\"  \"mat_col.8\"  \"mat_col.9\" \n[11] \"mat_col.10\"\n```\n:::\n:::\n\n\nCreating a matrix-colum requires using `tibble()` instead of `data.frame()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl <- tibble(x = letters[1:10], mat_col = my_matrix)\ndim(tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10  2\n```\n:::\n\n```{.r .cell-code}\ncolnames(tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"x\"       \"mat_col\"\n```\n:::\n:::\n\n\nYou can also \"group\" columns of a data frame or tibble into a matrix-column using `dplyr`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_mat_col <-\n  df %>% \n  mutate(matrix_column = as.matrix(select(., starts_with(\"mat_col.\")))) %>% \n  #then remove the originals\n  select(-starts_with(\"mat_col.\"))\n```\n:::\n\n\nThis creates a matrix-column, and the column names of the matrix itself come from the original dataframe (i.e. `df`).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(df_mat_col)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"x\"             \"matrix_column\"\n```\n:::\n\n```{.r .cell-code}\ncolnames(df_mat_col$matrix_column)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"mat_col.1\"  \"mat_col.2\"  \"mat_col.3\"  \"mat_col.4\"  \"mat_col.5\" \n [6] \"mat_col.6\"  \"mat_col.7\"  \"mat_col.8\"  \"mat_col.9\"  \"mat_col.10\"\n```\n:::\n:::\n\n\n# When do you need a matrix-column?\n\nMatrix-columns are sometimes useful in modeling, when a predictor or covariate is not just a single variable, but a vector for every observation.\nFor example, in multivariate analyses, certain packages (e.g. `ropls`) require a matrix as an input.\nFunctional models are another example, which fit continuous functions of some variable (e.g. over time) as a covariate (One specific example are [distributed lag non-linear models](https://cran.r-project.org/package=dlnm), which I hope to start blogging about soon).\n\n\n::: {.cell}\n\n```{.r .cell-code}\npca <- prcomp(~ mat_col, data = tbl)\nsummary(pca)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nImportance of components:\n                          PC1    PC2    PC3    PC4     PC5     PC6     PC7\nStandard deviation     1.8022 1.6779 1.5645 1.3203 1.02222 0.77201 0.51162\nProportion of Variance 0.2647 0.2295 0.1995 0.1421 0.08517 0.04858 0.02134\nCumulative Proportion  0.2647 0.4942 0.6937 0.8358 0.92096 0.96954 0.99087\n                           PC8     PC9      PC10\nStandard deviation     0.31635 0.10918 5.838e-18\nProportion of Variance 0.00816 0.00097 0.000e+00\nCumulative Proportion  0.99903 1.00000 1.000e+00\n```\n:::\n:::\n\n\n# Viewing and using matrix-columns\n\nMatrix-columns are... weird, and as such they have some quirks in how they are printed in RStudio.\nSome of these may be bugs, but as far as I know, there aren't any [issues](https://github.com/rstudio/rstudio/issues?q=is%3Aissue+is%3Aopen+matrix+column) related to matrix-columns at the time of writing this post.\nIf you are using paged printing of data frames in R Markdown documents, a tibble with a matrix column will simply not appear in-line.\nInstead you get an empty viewer box like so.\n\n![Trying to print a tibble with a matrix-column shows nothing in RStudio with paged printing of data frames.](fig1.png)\n\nYou can turn off paged printing for a single code chunk with the `paged.print = FALSE` chunk option, and you'll see something more like this:\n\n\n```{{r}}\n#| paged.print: false\ntbl <- tibble(x = letters[1:10], mat_col = my_matrix)\ntbl\n``` \n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 2\n   x     mat_col[,1]    [,2]    [,3]    [,4]   [,5]   [,6]   [,7]   [,8]   [,9]\n   <chr>       <dbl>   <dbl>   <dbl>   <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>\n 1 a          0.464  -1.12   -1.01    1.73    0.531  2.10   1.44   0.836  0.369\n 2 b          1.82   -0.239   0.749   1.57   -0.256 -1.41  -0.951 -1.71  -1.77 \n 3 c          0.190  -0.785   1.27   -1.43   -1.82   0.715 -0.593  2.07  -0.228\n 4 d         -1.18    0.271   1.52    0.135  -0.169 -1.23   0.522 -0.410  1.23 \n 5 e         -0.509  -0.944   0.108  -1.03    0.407 -0.953 -0.415 -1.25  -0.621\n 6 f          1.67    0.185  -0.807   0.149   0.114  0.240 -0.791  0.418 -2.13 \n 7 g         -2.04   -2.38    0.786   0.660  -0.114 -0.935  0.519 -1.32  -0.627\n 8 h         -0.0686  0.166  -0.0905 -1.18    0.217 -0.695 -1.53  -0.554 -0.610\n 9 i         -1.65    0.0525 -0.501  -1.64   -0.599 -1.04   0.143 -1.83  -0.626\n10 j         -0.623  -0.290  -0.430  -0.0352  0.937 -3.33   2.32   1.10  -0.503\n# … with 1 more variable: mat_col[10] <dbl>\n```\n:::\n:::\n\n\nAlso note that `View()` only renders the first column of a matrix column, with no indication that there is more to see.\n\n![`View()`ing a tibble with a matrix-column only shows the first column of the matrix](fig2.png)\n\nDespite the printing and viewing issues, matrix columns are surprisingly easy to use.\nThe usual sort of indexing works as expected.\nYou can select the matrix column by name with `[` or `dplyr::select()`, and you can extract the matrix column using the `$` operator, `[[`, or `dplyr::pull()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#a tibble with only the matrix-column\ntbl[\"mat_col\"]\nselect(tbl, mat_col) \n\n#the matrix itself:\ntbl$mat_col\ntbl[[\"mat_col\"]]\npull(tbl, \"mat_col\")\n```\n:::\n\n\nIndexing rows works with no problem too.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl[3, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  x     mat_col[,1]   [,2]  [,3]  [,4]  [,5]  [,6]   [,7]  [,8]   [,9] [,10]\n  <chr>       <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl>  <dbl> <dbl>  <dbl> <dbl>\n1 c           0.190 -0.785  1.27 -1.43 -1.82 0.715 -0.593  2.07 -0.228  2.15\n```\n:::\n\n```{.r .cell-code}\n#dplyr::filter works too\nfilter(tbl, x %in% c(\"a\", \"f\", \"i\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  x     mat_co…¹    [,2]   [,3]   [,4]   [,5]   [,6]   [,7]   [,8]   [,9]  [,10]\n  <chr>    <dbl>   <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>\n1 a        0.464 -1.12   -1.01   1.73   0.531  2.10   1.44   0.836  0.369 -1.50 \n2 f        1.67   0.185  -0.807  0.149  0.114  0.240 -0.791  0.418 -2.13  -0.422\n3 i       -1.65   0.0525 -0.501 -1.64  -0.599 -1.04   0.143 -1.83  -0.626  0.376\n# … with abbreviated variable name ¹​mat_col[,1]\n```\n:::\n:::\n\n\nAnd as we saw above, using matrix-columns in model formulas seems to work consistently as long as the input is expected or allowed to be a matrix.\n\n# Saving matrix-columns to disk\n\nOrdinary data frames and tibbles (i.e. without list-columns or matrix-columns) can usually be reliably saved as .csv files.\n\nA tibble with a list-column will throw an error if you try to write it to a .csv file\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_list_col <- tibble(x = 1:10, y = list(1:10))\n\nwrite_csv(df_list_col, \"test.csv\")\n```\n:::\n\n\nTibbles with matrix-columns don't throw the same error, but unfortunately this is not because they work correctly.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# write_csv(tbl, \"test.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# read_csv(\"test.csv\")\n```\n:::\n\n\nAs you can see, only the first column of the matrix was saved to the csv file.\nIf you want to use matrix-columns in your work, you should either create them in the same document as your analysis, or save them as .rds files.\n\nThat's all for now, but please let me know in the comments if you've used matrix-columns in your work!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}