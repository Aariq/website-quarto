<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>website-quarto</title>
<link>https://www.ericrscott.com/blog.html</link>
<atom:link href="https://www.ericrscott.com/blog.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.2.335</generator>
<lastBuildDate>Thu, 05 Jan 2023 05:00:00 GMT</lastBuildDate>
<item>
  <title>Oh for {fs}, are you kidding me, base R?</title>
  <dc:creator>Eric R. Scott</dc:creator>
  <link>https://www.ericrscott.com/posts/2023-01-04-list-files/index.html</link>
  <description><![CDATA[ 



<p>This is a cautionary tale about the base R function <code>list.files()</code>. When you give it a vector of paths (which you totally can do), it <strong>re-orders</strong> the output alphabetically. This screwed me over in a project I’m working on where I took file paths from a data frame, used them to <code>list.files()</code> and assumed (a sane assumption, I think) that the output would be in the same order. In this case, I knew there was only one file per path, but I think I would have assumed this even if it was returning more than one file.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">tmp <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">tempdir</span>()</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">dir.create</span>(<span class="fu" style="color: #4758AB;">file.path</span>(tmp, <span class="st" style="color: #20794D;">"A"</span>))</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">dir.create</span>(<span class="fu" style="color: #4758AB;">file.path</span>(tmp, <span class="st" style="color: #20794D;">"B"</span>))</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">dir.create</span>(<span class="fu" style="color: #4758AB;">file.path</span>(tmp, <span class="st" style="color: #20794D;">"C"</span>))</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;">file.create</span>(<span class="fu" style="color: #4758AB;">file.path</span>(tmp, <span class="st" style="color: #20794D;">"A"</span>, <span class="st" style="color: #20794D;">"A.txt"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">file.create</span>(<span class="fu" style="color: #4758AB;">file.path</span>(tmp, <span class="st" style="color: #20794D;">"B"</span>, <span class="st" style="color: #20794D;">"B.txt"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">file.create</span>(<span class="fu" style="color: #4758AB;">file.path</span>(tmp, <span class="st" style="color: #20794D;">"C"</span>, <span class="st" style="color: #20794D;">"C.txt"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">file_list <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">file.path</span>(tmp, <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"C"</span>, <span class="st" style="color: #20794D;">"A"</span>, <span class="st" style="color: #20794D;">"B"</span>))</span>
<span id="cb7-2">file_list <span class="co" style="color: #5E5E5E;">#in order C, A, B</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "/var/folders/wr/by_lst2d2fngf67mknmgf4340000gn/T//RtmpKvlGHq/C"
[2] "/var/folders/wr/by_lst2d2fngf67mknmgf4340000gn/T//RtmpKvlGHq/A"
[3] "/var/folders/wr/by_lst2d2fngf67mknmgf4340000gn/T//RtmpKvlGHq/B"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;">list.files</span>(file_list, <span class="at" style="color: #657422;">full.names =</span> <span class="cn" style="color: #8f5902;">TRUE</span>) <span class="co" style="color: #5E5E5E;">#in order A, B, C!</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "/var/folders/wr/by_lst2d2fngf67mknmgf4340000gn/T//RtmpKvlGHq/A/A.txt"
[2] "/var/folders/wr/by_lst2d2fngf67mknmgf4340000gn/T//RtmpKvlGHq/B/B.txt"
[3] "/var/folders/wr/by_lst2d2fngf67mknmgf4340000gn/T//RtmpKvlGHq/C/C.txt"</code></pre>
</div>
</div>
<p>So I was wrong, and it made all the work I did for the past several months somewhat wrong, but the good news is there is an easy fix. The <a href="https://fs.r-lib.org/"><code>fs</code> package</a> is the ‘tidy’ solution to working with files and file paths in R. The <code>fs</code> alternative to <code>list.files()</code> is <a href="https://fs.r-lib.org/reference/dir_ls.html"><code>dir_ls()</code></a>, and like many tidyverse equivalents of base R functions, it is better because it does <em>less</em>. It won’t re-order the outputs and it always assumes you want the full paths (not just the file name as is the default with <code>list.files()</code>).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;">library</span>(fs)</span>
<span id="cb11-2">fs<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">dir_ls</span>(file_list) <span class="co" style="color: #5E5E5E;">#in correct order C, A, B</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>/var/folders/wr/by_lst2d2fngf67mknmgf4340000gn/T/RtmpKvlGHq/C/C.txt
/var/folders/wr/by_lst2d2fngf67mknmgf4340000gn/T/RtmpKvlGHq/A/A.txt
/var/folders/wr/by_lst2d2fngf67mknmgf4340000gn/T/RtmpKvlGHq/B/B.txt</code></pre>
</div>
</div>
<p>Needless to say, I’ll be switching over to <code>fs::dir_ls()</code> for this project. I’ll also be spending some more time exploring the <code>fs</code> package and likely using it for all my file exploring and manipulation needs from now on.</p>



 ]]></description>
  <guid>https://www.ericrscott.com/posts/2023-01-04-list-files/index.html</guid>
  <pubDate>Thu, 05 Jan 2023 05:00:00 GMT</pubDate>
</item>
</channel>
</rss>
