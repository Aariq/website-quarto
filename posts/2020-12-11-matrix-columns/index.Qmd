---
title: Working with matrix-columns in tibbles
author: Eric R. Scott
date: '2021-01-11'
# slug: matrix-columns
categories:
  - r
---

{{< downloadthis index.Qmd dname="index.Qmd" label="Download Qmd" >}}

```{r setup, include=FALSE}
library(tidyverse)
library(knitr)
set.seed(92387)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
```

# What's a matrix-column?

The `tibble` package in R allows for the construction of "tibbles"---a sort of "enhanced" data frame.
Most of these enhancements are fairly mundane, such as better printing in the console and not modifying column names.
One of the unique features of tibbles is the ability to have a column that is a list.
[List-columns](https://jennybc.github.io/purrr-tutorial/ls13_list-columns.html) have been written about fairly extensively as they are a very cool way of working with data in the tidyverse.
A less commonly known feature is that matrix-columns are also possible in a tibble.
A matrix-column is a column of a tibble that is itself a $n \times m$ matrix.
Because a matrix-column is simultaneously a single column (of a tibble) and $m$ columns (of the matrix), there are some quirks to working with them.

# Creating a matrix-column.

Data frames and tibbles handle matrix inputs differently.
`data.frame()` adds an $n \times m$ matrix as $m$ columns of a dataframe while `tibble()` creates a matrix-column.

```{r}
my_matrix <- matrix(rnorm(100), nrow = 10)
```

No matrix-column.
Just regular columns named `mat_col._`:

```{r}
df <- data.frame(x = letters[1:10], mat_col = my_matrix)
dim(df)
colnames(df)
```

Creating a matrix-colum requires using `tibble()` instead of `data.frame()`:

```{r}
tbl <- tibble(x = letters[1:10], mat_col = my_matrix)
dim(tbl)
colnames(tbl)
```

You can also "group" columns of a data frame or tibble into a matrix-column using `dplyr`.

```{r}
df_mat_col <-
  df %>% 
  mutate(matrix_column = as.matrix(select(., starts_with("mat_col.")))) %>% 
  #then remove the originals
  select(-starts_with("mat_col."))
```

This creates a matrix-column, and the column names of the matrix itself come from the original dataframe (i.e. `df`).

```{r}
colnames(df_mat_col)
colnames(df_mat_col$matrix_column)
```

# When do you need a matrix-column?

Matrix-columns are sometimes useful in modeling, when a predictor or covariate is not just a single variable, but a vector for every observation.
For example, in multivariate analyses, certain packages (e.g. `ropls`) require a matrix as an input.
Functional models are another example, which fit continuous functions of some variable (e.g. over time) as a covariate (One specific example are [distributed lag non-linear models](https://cran.r-project.org/package=dlnm), which I hope to start blogging about soon).

```{r}
pca <- prcomp(~ mat_col, data = tbl)
summary(pca)
```

# Viewing and using matrix-columns

Matrix-columns are... weird, and as such they have some quirks in how they are printed in RStudio.
Some of these may be bugs, but as far as I know, there aren't any [issues](https://github.com/rstudio/rstudio/issues?q=is%3Aissue+is%3Aopen+matrix+column) related to matrix-columns at the time of writing this post.
If you are using paged printing of data frames in R Markdown documents, a tibble with a matrix column will simply not appear in-line.
Instead you get an empty viewer box like so.

![Trying to print a tibble with a matrix-column shows nothing in RStudio with paged printing of data frames.](fig1.png)

You can turn off paged printing for a single code chunk with the `paged.print = FALSE` chunk option, and you'll see something more like this:

``` {{r}}
#| paged.print: false
tbl <- tibble(x = letters[1:10], mat_col = my_matrix)
tbl
```

```{r echo=FALSE}
tbl
```

Also note that `View()` only renders the first column of a matrix column, with no indication that there is more to see.

![`View()`ing a tibble with a matrix-column only shows the first column of the matrix](fig2.png)

Despite the printing and viewing issues, matrix columns are surprisingly easy to use.
The usual sort of indexing works as expected.
You can select the matrix column by name with `[` or `dplyr::select()`, and you can extract the matrix column using the `$` operator, `[[`, or `dplyr::pull()`.

```{r eval=FALSE}
#a tibble with only the matrix-column
tbl["mat_col"]
select(tbl, mat_col) 

#the matrix itself:
tbl$mat_col
tbl[["mat_col"]]
pull(tbl, "mat_col")
```

Indexing rows works with no problem too.

```{r}
tbl[3, ]

#dplyr::filter works too
filter(tbl, x %in% c("a", "f", "i"))
```

And as we saw above, using matrix-columns in model formulas seems to work consistently as long as the input is expected or allowed to be a matrix.

# Saving matrix-columns to disk

Ordinary data frames and tibbles (i.e. without list-columns or matrix-columns) can usually be reliably saved as .csv files.

A tibble with a list-column will throw an error if you try to write it to a .csv file

```{r error=TRUE}
df_list_col <- tibble(x = 1:10, y = list(1:10))

write_csv(df_list_col, "test.csv")
```

Tibbles with matrix-columns don't throw the same error, but unfortunately this is not because they work correctly.

```{r}
# write_csv(tbl, "test.csv")
```

```{r}
# read_csv("test.csv")
```

As you can see, only the first column of the matrix was saved to the csv file.
If you want to use matrix-columns in your work, you should either create them in the same document as your analysis, or save them as .rds files.

That's all for now, but please let me know in the comments if you've used matrix-columns in your work!
